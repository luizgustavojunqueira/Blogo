package pages

import "github.com/luizgustavojunqueira/Blogo/internal/repository"
import "github.com/luizgustavojunqueira/Blogo/internal/templates/components"

templ EditorPage(blogname, pagetitle string, post repository.PostWithTags, edit bool, authenticated bool, tagsJsonString string) {
	if authenticated {
		@components.Header(blogname, []string{"Back to Home", "Logout"}, []string{"/", "/logout"})
	} else {
		@components.Header(blogname, []string{"Back to Home"}, []string{"/"})
	}
	<main class="grid max-h-[calc(100vh-var(--spacing)*17)] min-h-full grid-cols-2">
		<form
			class="border-darkgray border-r-5 flex h-[calc(100vh-var(--spacing)*17)] max-h-[calc(100vh-var(--spacing)*17)] w-full flex-col items-center justify-start p-2 dark:border-slate-100  "
			hx-post="/post/parse"
			hx-target="#preview"
			hx-swap="innerHTML"
			hx-trigger="keyup delay:500ms, load"
		>
			<section class="flex w-full flex-col items-center justify-center ">
				if edit {
					<input
						class="border-1 border-darkgray hover:bg-darkgray w-full rounded-md p-3 text-lg hover:cursor-pointer hover:text-white dark:border-slate-100 dark:hover:bg-slate-100 dark:hover:text-black"
						type="button"
						value="Save"
						hx-post={ "/post/edit/" + post.Slug }
						hx-target-400="#teste"
						hx-target-401="#teste"
					/>
				} else {
					<input
						class="border-1 border-darkgray hover:bg-darkgray w-full rounded-md p-3 text-lg hover:cursor-pointer hover:text-white dark:border-slate-100 dark:hover:bg-slate-100 dark:hover:text-black"
						type="button"
						value="Save"
						hx-post="/post/new"
						hx-target-400="#teste"
						hx-target-401="#teste"
					/>
				}
				<span id="teste" class="text-red-500"></span>
				<label for="title" class="w-full text-lg font-bold">Title</label>
				<input
					class="border-1 border-darkgray w-full rounded-md p-3 text-lg dark:border-slate-100"
					type="text"
					name="title"
					id="title"
					value={ post.Title }
				/>
				<label for="slug" class="w-full text-lg font-bold">Slug</label>
				<input
					class="border-1 border-darkgray w-full rounded-md p-3 text-lg dark:border-slate-100"
					type="text"
					name="slug"
					id="slug"
					value={ post.Slug }
				/>
				<label for="description" class="w-full text-lg font-bold">Description</label>
				<input
					class="border-1 border-darkgray w-full rounded-md p-3 text-lg dark:border-slate-100"
					type="text"
					name="description"
					id="description"
					value={ post.Description.String }
				/>
				<div
					x-data="tagSelector()"
					x-init={ "selectedTags = " + tagsJsonString }
					class="w-full"
				>
					<label for="tag-input" class="w-full text-lg font-bold">Tags</label>
					<input
						id="tag-input"
						type="text"
						x-model="query"
						@keydown.enter.prevent="addTag(query)"
						@input.debounce.300ms="searchTags()"
						autocomplete="off"
						class="border-1 border-darkgray w-full rounded-md p-3 text-lg dark:border-slate-100"
						placeholder="Digite para buscar ou criar tags"
					/>
					<ul
						x-show="suggestions.length > 0 && query.length > 0"
						class="border border-gray-300 rounded-md mt-1 max-h-40 overflow-auto bg-white dark:bg-gray-800"
					>
						<template x-for="tag in suggestions" :key="tag">
							<li
								@click="addTag(tag)"
								class="cursor-pointer px-3 py-1 hover:bg-gray-200 dark:hover:bg-gray-700"
								x-text="tag"
							></li>
						</template>
					</ul>
					<div class="mt-2 flex flex-wrap gap-2">
						<template x-for="(tag, index) in selectedTags" :key="tag">
							<div
								class="flex items-center rounded bg-blue-500 px-2 py-1 text-white"
							>
								<span x-text="tag"></span>
								<button
									type="button"
									@click="removeTag(index)"
									class="ml-1 font-bold hover:text-gray-300"
									aria-label="Remover tag"
								>
									&times;
								</button>
							</div>
						</template>
					</div>
					<input
						type="hidden"
						name="tags"
						:value="selectedTags.join(',')"
					/>
				</div>
				<script>
        function tagSelector() {
            return {
query: '',
           suggestions: [],
           selectedTags: [],

           searchTags() {
               if (this.query.length === 0) {
                   this.suggestions = [];
                   return;
               }
               fetch(`/tags/search/${encodeURIComponent(this.query)}`)
                   .then((res) => {
                           if (!res.ok) throw new Error('Network response was not ok');
                           return res.json();
                           })
               .then((data) => {
                       this.suggestions = data.filter(
                               (tag) => !this.selectedTags.includes(tag)
                               );
                       })
               .catch(() => {
                       this.suggestions = [];
                       });
           },

           addTag(tag) {
               tag = tag.trim();
               if (tag.length === 0) return;
               if (!this.selectedTags.includes(tag)) {
                   this.selectedTags.push(tag);
               }
               this.query = '';
               this.suggestions = [];
           },

           removeTag(index) {
               this.selectedTags.splice(index, 1);
           },
            };
        }
    </script>
				<label for="content" class="w-full text-lg font-bold">Content</label>
			</section>
			<textarea
				class="border-1 border-darkgray h-full w-full resize-none rounded-md p-3 dark:border-slate-100"
				name="content"
				id="content"
				cols="30"
				rows="10"
			>
				{ post.Content }
			</textarea>
		</form>
		<section
			id="preview"
			class="flex h-[calc(100vh-var(--spacing)*17)] max-h-[calc(100vh-var(--spacing)*17)] w-full max-w-[50vw] flex-col items-center overflow-scroll overflow-x-hidden p-3"
		>
			@components.Markdown(post)
		</section>
	</main>
}

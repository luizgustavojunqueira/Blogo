// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package repository

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
;


insert into posts (title, content, parsed_content, slug, created_at, modified_at)
values (?1, ?2, ?3, ?4, ?5, ?6)
returning id, title, content, parsed_content, slug, created_at, modified_at
`

type CreatePostParams struct {
	Title         string
	Content       string
	ParsedContent string
	Slug          string
	CreatedAt     sql.NullTime
	ModifiedAt    sql.NullTime
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Content,
		arg.ParsedContent,
		arg.Slug,
		arg.CreatedAt,
		arg.ModifiedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.ParsedContent,
		&i.Slug,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
select id, title, content, parsed_content, slug, created_at, modified_at
from posts
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.ParsedContent,
			&i.Slug,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

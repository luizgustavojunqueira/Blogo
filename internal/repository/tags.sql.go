// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addTagToPost = `-- name: AddTagToPost :exec
insert into tags_posts (tag_id, post_id, created_at, modified_at)
values ($1, $2, $3, $4)
on conflict (tag_id, post_id) do nothing
`

type AddTagToPostParams struct {
	TagID      int64
	PostID     int64
	CreatedAt  pgtype.Timestamp
	ModifiedAt pgtype.Timestamp
}

func (q *Queries) AddTagToPost(ctx context.Context, arg AddTagToPostParams) error {
	_, err := q.db.Exec(ctx, addTagToPost,
		arg.TagID,
		arg.PostID,
		arg.CreatedAt,
		arg.ModifiedAt,
	)
	return err
}

const clearPostTagsBySlug = `-- name: ClearPostTagsBySlug :exec
delete from tags_posts
where post_id = (select id from posts where slug = $1)
`

func (q *Queries) ClearPostTagsBySlug(ctx context.Context, slug string) error {
	_, err := q.db.Exec(ctx, clearPostTagsBySlug, slug)
	return err
}

const createTagIfNotExists = `-- name: CreateTagIfNotExists :many
with
    ins as (
        insert into tags(name, created_at, modified_at)
        values ($1, $2, $3) on conflict(name) do nothing
        returning id, name, created_at, modified_at
    )
select id, name, created_at, modified_at
from ins
union all
select id, name, created_at, modified_at
from tags
where name = $1
limit 1
`

type CreateTagIfNotExistsParams struct {
	Name       string
	CreatedAt  pgtype.Timestamp
	ModifiedAt pgtype.Timestamp
}

type CreateTagIfNotExistsRow struct {
	ID         int64
	Name       string
	CreatedAt  pgtype.Timestamp
	ModifiedAt pgtype.Timestamp
}

func (q *Queries) CreateTagIfNotExists(ctx context.Context, arg CreateTagIfNotExistsParams) ([]CreateTagIfNotExistsRow, error) {
	rows, err := q.db.Query(ctx, createTagIfNotExists, arg.Name, arg.CreatedAt, arg.ModifiedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CreateTagIfNotExistsRow
	for rows.Next() {
		var i CreateTagIfNotExistsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTags = `-- name: GetTags :many
select id, name, created_at, modified_at
from tags
order by name
`

func (q *Queries) GetTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByPost = `-- name: GetTagsByPost :many
select t.id, t.name, t.created_at, t.modified_at
from tags t
join tags_posts tp on t.id = tp.tag_id
join posts p on p.id = tp.post_id
where p.slug = $1
order by t.name
`

func (q *Queries) GetTagsByPost(ctx context.Context, slug string) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getTagsByPost, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTagFromPost = `-- name: RemoveTagFromPost :exec
delete from tags_posts
where tag_id = $1 and post_id = $2
`

type RemoveTagFromPostParams struct {
	TagID  int64
	PostID int64
}

func (q *Queries) RemoveTagFromPost(ctx context.Context, arg RemoveTagFromPostParams) error {
	_, err := q.db.Exec(ctx, removeTagFromPost, arg.TagID, arg.PostID)
	return err
}

const searchTags = `-- name: SearchTags :many
select name
from tags
where name ilike $1 || '%'
order by name
limit 10
`

func (q *Queries) SearchTags(ctx context.Context, dollar_1 pgtype.Text) ([]string, error) {
	rows, err := q.db.Query(ctx, searchTags, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

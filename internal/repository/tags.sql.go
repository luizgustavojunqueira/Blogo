// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package repository

import (
	"context"
	"database/sql"
)

const addTagToPost = `-- name: AddTagToPost :exec
;

insert into tags_posts (tag_id, post_id, created_at, modified_at)
values (?1, ?2, ?3, ?4)
on conflict (tag_id, post_id) do nothing
`

type AddTagToPostParams struct {
	TagID      int64
	PostID     int64
	CreatedAt  sql.NullTime
	ModifiedAt sql.NullTime
}

func (q *Queries) AddTagToPost(ctx context.Context, arg AddTagToPostParams) error {
	_, err := q.db.ExecContext(ctx, addTagToPost,
		arg.TagID,
		arg.PostID,
		arg.CreatedAt,
		arg.ModifiedAt,
	)
	return err
}

const clearPostTagsBySlug = `-- name: ClearPostTagsBySlug :exec
;

delete from tags_posts
where post_id = (select id from posts where slug =?1)
`

func (q *Queries) ClearPostTagsBySlug(ctx context.Context, slug string) error {
	_, err := q.db.ExecContext(ctx, clearPostTagsBySlug, slug)
	return err
}

const createTagIfNotExists = `-- name: CreateTagIfNotExists :exec
INSERT OR IGNORE INTO tags(name, created_at, modified_at)
VALUES (?1, ?2, ?3)
`

type CreateTagIfNotExistsParams struct {
	Name       string
	CreatedAt  sql.NullTime
	ModifiedAt sql.NullTime
}

func (q *Queries) CreateTagIfNotExists(ctx context.Context, arg CreateTagIfNotExistsParams) error {
	_, err := q.db.ExecContext(ctx, createTagIfNotExists, arg.Name, arg.CreatedAt, arg.ModifiedAt)
	return err
}

const getTagByName = `-- name: GetTagByName :one
select id, name, created_at, modified_at
from tags
where name =?1
limit 1
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getTags = `-- name: GetTags :many
;

select id, name, created_at, modified_at
from tags
order by name
`

func (q *Queries) GetTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByPost = `-- name: GetTagsByPost :many
;


select t.id, t.name, t.created_at, t.modified_at
from tags t
join tags_posts tp on t.id = tp.tag_id
join posts p on p.id = tp.post_id
where p.slug =?1
order by t.name
`

func (q *Queries) GetTagsByPost(ctx context.Context, slug string) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getTagsByPost, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchTags = `-- name: SearchTags :many
;

select name
from tags
where name like?1 || '%' collate nocase
order by name
limit 10
`

func (q *Queries) SearchTags(ctx context.Context, search sql.NullString) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, searchTags, search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

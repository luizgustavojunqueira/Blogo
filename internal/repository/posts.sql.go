// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posts.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
insert into posts (title, content, parsed_content, slug, created_at, modified_at)
values ($1, $2, $3, $4, $5, $6)
returning id, title, content, parsed_content, slug, created_at, modified_at
`

type CreatePostParams struct {
	Title         string
	Content       string
	ParsedContent string
	Slug          string
	CreatedAt     pgtype.Timestamp
	ModifiedAt    pgtype.Timestamp
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.Title,
		arg.Content,
		arg.ParsedContent,
		arg.Slug,
		arg.CreatedAt,
		arg.ModifiedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.ParsedContent,
		&i.Slug,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deletePostBySlug = `-- name: DeletePostBySlug :exec
delete from posts
where slug = $1
`

func (q *Queries) DeletePostBySlug(ctx context.Context, slug string) error {
	_, err := q.db.Exec(ctx, deletePostBySlug, slug)
	return err
}

const getPostBySlug = `-- name: GetPostBySlug :one
select id, title, content, parsed_content, slug, created_at, modified_at
from posts
where slug = $1
`

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (Post, error) {
	row := q.db.QueryRow(ctx, getPostBySlug, slug)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.ParsedContent,
		&i.Slug,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
select id, title, content, parsed_content, slug, created_at, modified_at
from posts
order by created_at desc
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.ParsedContent,
			&i.Slug,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostBySlug = `-- name: UpdatePostBySlug :exec
update posts
set title = $1, slug = $2, content = $3, parsed_content = $4, modified_at = $5
where slug = $6
`

type UpdatePostBySlugParams struct {
	Title         string
	Slug          string
	Content       string
	ParsedContent string
	ModifiedAt    pgtype.Timestamp
	Slug_2        string
}

func (q *Queries) UpdatePostBySlug(ctx context.Context, arg UpdatePostBySlugParams) error {
	_, err := q.db.Exec(ctx, updatePostBySlug,
		arg.Title,
		arg.Slug,
		arg.Content,
		arg.ParsedContent,
		arg.ModifiedAt,
		arg.Slug_2,
	)
	return err
}

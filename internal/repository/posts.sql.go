// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package repository

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
;

insert into posts (title, toc, content, parsed_content, description, slug, created_at, modified_at, readtime)
values (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9)
returning id, title, content, toc, parsed_content, slug, created_at, modified_at, description, readtime
`

type CreatePostParams struct {
	Title         string
	Toc           string
	Content       string
	ParsedContent string
	Description   sql.NullString
	Slug          string
	CreatedAt     sql.NullTime
	ModifiedAt    sql.NullTime
	Readtime      sql.NullInt64
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Toc,
		arg.Content,
		arg.ParsedContent,
		arg.Description,
		arg.Slug,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.Readtime,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Toc,
		&i.ParsedContent,
		&i.Slug,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Description,
		&i.Readtime,
	)
	return i, err
}

const deletePostBySlug = `-- name: DeletePostBySlug :exec
;

delete from posts
where slug =?1
`

func (q *Queries) DeletePostBySlug(ctx context.Context, slug string) error {
	_, err := q.db.ExecContext(ctx, deletePostBySlug, slug)
	return err
}

const getPostBySlug = `-- name: GetPostBySlug :one
;

select id, title, content, toc, parsed_content, slug, created_at, modified_at, description, readtime
from posts
where slug =?1
`

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostBySlug, slug)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Toc,
		&i.ParsedContent,
		&i.Slug,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Description,
		&i.Readtime,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
select id, title, content, toc, parsed_content, slug, created_at, modified_at, description, readtime
from posts
order by created_at desc
`

func (q *Queries) GetPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Toc,
			&i.ParsedContent,
			&i.Slug,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.Description,
			&i.Readtime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByTag = `-- name: GetPostsByTag :many
;

select
    p.id,
    p.title,
    p.content,
    p.toc,
    p.parsed_content,
    p.slug,
    p.description,
    p.readtime,
    p.created_at,
    p.modified_at,
    t.id as tag_id,
    t.name as tag_name,
    t.created_at as tag_created_at,
    t.modified_at as tag_modified_at
from posts p
left join tags_posts tp on p.id = tp.post_id
left join tags t on tp.tag_id = t.id
where
    cast(?1 as text) is null
    or p.id in (
        select tp2.post_id
        from tags_posts tp2
        join tags t2 on tp2.tag_id = t2.id
        where t2.name = ?1
    )
order by p.created_at desc, p.id, t.id
`

type GetPostsByTagRow struct {
	ID            int64
	Title         string
	Content       string
	Toc           string
	ParsedContent string
	Slug          string
	Description   sql.NullString
	Readtime      sql.NullInt64
	CreatedAt     sql.NullTime
	ModifiedAt    sql.NullTime
	TagID         sql.NullInt64
	TagName       sql.NullString
	TagCreatedAt  sql.NullTime
	TagModifiedAt sql.NullTime
}

func (q *Queries) GetPostsByTag(ctx context.Context, tagName sql.NullString) ([]GetPostsByTagRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByTag, tagName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByTagRow
	for rows.Next() {
		var i GetPostsByTagRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Toc,
			&i.ParsedContent,
			&i.Slug,
			&i.Description,
			&i.Readtime,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.TagID,
			&i.TagName,
			&i.TagCreatedAt,
			&i.TagModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostBySlug = `-- name: UpdatePostBySlug :one
;

update posts
set title = ?1, toc = ?2, slug = ?3, content = ?4, parsed_content = ?5, modified_at = ?6, description = ?7, readtime = ?8
where slug = ?9
returning id, title, content, toc, parsed_content, slug, created_at, modified_at, description, readtime
`

type UpdatePostBySlugParams struct {
	Title         string
	Toc           string
	NewSlug       string
	Content       string
	ParsedContent string
	ModifiedAt    sql.NullTime
	Description   sql.NullString
	Readtime      sql.NullInt64
	Slug          string
}

func (q *Queries) UpdatePostBySlug(ctx context.Context, arg UpdatePostBySlugParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePostBySlug,
		arg.Title,
		arg.Toc,
		arg.NewSlug,
		arg.Content,
		arg.ParsedContent,
		arg.ModifiedAt,
		arg.Description,
		arg.Readtime,
		arg.Slug,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Toc,
		&i.ParsedContent,
		&i.Slug,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.Description,
		&i.Readtime,
	)
	return i, err
}
